name=test_run
[feature_extraction]
    run=True
    # CountVectorizer, TfIdfVectorizer
#     vectorizer=sklearn.feature_extraction.text.TfidfVectorizer
    vectorizer=plugins.bov.ThesaurusVectorizer
    #input_generator=utils.GorkanaXmlParser

    # All arguments that are passed to the Vectorizer class are converted to their
    # python type using ast.literal_eval. This requires the arguments whose correct
    # type is str to be enclosed in quotation marks. Arguments that are left empty
    # will use the default values set in the class constructor.
    input='content'
    charset=
    charset_error=replace
    strip_accents=
    lowercase=
    stop_words=
    token_pattern=
    ngram_range=
    min_n=
    max_n=
    min_df=1
    max_df=
    analyzer=     
    preprocessor=
    tokenizer=
    max_features=
    vocabulary=
    binary=
    dtype=
    
    constrain_vocabulary=True

    #extra options required by the Bag-of-Vectors project Vectorizer
    thesaurus_file=exp1-1.strings
    pos_insensitive=True
    sim_threshold=0.1
    
[crossvalidation]
    #if false, a single run with an 80/20 split is performed
    run=True
    # permitted values are 'kfold', 'skfold', 'loo', 'bootstrap' or 'oracle'. k-fold requires only the 'k' option (number of folds)
    # to be set. 'skfold' performs stratified k-fold. 'bootstrap' required both 'k' (number of bootstraps) and 'ratio'
    # (the proportion of the dataset to include in the train split, 0<ratio<1, the rest of the data is used for testing).
    # If 'oracle' the training data is used for testing too
    type=kfold
    k=5
    ratio=0.8

	stream_data=true
	# seen_data_evaluator needs to be a callable that takes a list of x and y values
	validation_slices=#utils.gorkana_200_seen_positives_validation
	
[split_data]
    run=true
    stream_data=true

[feature_selection]
    run=False
    # the selection method should be one of the classes defined in
    # sklearn.feature_selection - any parameters the class initialiser takes
    # can be defined below and they will be dynamically assigned to the init call
    method=sklearn.feature_selection.SelectKBest
    scoring_function=sklearn.feature_selection.chi2
    k=100
    
[dimensionality_reduction]
    run=False
    #alternatives: sklearn.decomposition.PCA/ ProjectedGradientNMF
    # PCA produces negative feature values (counts) which makes NaiveBayes rather upset
    method=sklearn.decomposition.ProjectedGradientNMF
    #must be less than each of the dimensions of the feature vector matrix
    n_components=5
    whiten=True #only applicable to PCA

[classifiers]
    [[sklearn.naive_bayes.MultinomialNB]]
		run=True
		
    [[sklearn.neighbors.KNeighborsClassifier]]
		run=True
    	k=10

		
    [[sklearn.linear_model.LogisticRegression]]
		run=True
		
    [[sklearn.svm.LinearSVC]]
    	run=True
    	
    [[classifiers.MostCommonLabelClassifier]]
	    run=True

[evaluation]

    [[sklearn.metrics.f1_score]]
        run=False
        #todo auc_score thinks our problem is not binary and fails
#	 [[sklearn.metrics.auc_score]]
#         run=False
#     [[sklearn.metrics.confusion_matrix]]
#         run=False
    [[sklearn.metrics.zero_one_score]]
        run=True

# roc_curve runs weirdly in this model because it takes different params
# (y_true, y_predicted_prob) as opposed to (y_true, y_predicted_label),
# which is what cross_val_score assumes
